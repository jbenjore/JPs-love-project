require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ImageStoresController do

  def mock_image_store(stubs={})
    @mock_image_store ||= mock_model(ImageStore, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all image_stores as @image_stores" do
      ImageStore.stub(:all) { [mock_image_store] }
      get :index
      assigns(:image_stores).should eq([mock_image_store])
    end
  end

  describe "GET show" do
    it "assigns the requested image_store as @image_store" do
      ImageStore.stub(:find).with("37") { mock_image_store }
      get :show, :id => "37"
      assigns(:image_store).should be(mock_image_store)
    end
  end

  describe "GET new" do
    it "assigns a new image_store as @image_store" do
      ImageStore.stub(:new) { mock_image_store }
      get :new
      assigns(:image_store).should be(mock_image_store)
    end
  end

  describe "GET edit" do
    it "assigns the requested image_store as @image_store" do
      ImageStore.stub(:find).with("37") { mock_image_store }
      get :edit, :id => "37"
      assigns(:image_store).should be(mock_image_store)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created image_store as @image_store" do
        ImageStore.stub(:new).with({'these' => 'params'}) { mock_image_store(:save => true) }
        post :create, :image_store => {'these' => 'params'}
        assigns(:image_store).should be(mock_image_store)
      end

      it "redirects to the created image_store" do
        ImageStore.stub(:new) { mock_image_store(:save => true) }
        post :create, :image_store => {}
        response.should redirect_to(image_store_url(mock_image_store))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved image_store as @image_store" do
        ImageStore.stub(:new).with({'these' => 'params'}) { mock_image_store(:save => false) }
        post :create, :image_store => {'these' => 'params'}
        assigns(:image_store).should be(mock_image_store)
      end

      it "re-renders the 'new' template" do
        ImageStore.stub(:new) { mock_image_store(:save => false) }
        post :create, :image_store => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested image_store" do
        ImageStore.stub(:find).with("37") { mock_image_store }
        mock_image_store.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :image_store => {'these' => 'params'}
      end

      it "assigns the requested image_store as @image_store" do
        ImageStore.stub(:find) { mock_image_store(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:image_store).should be(mock_image_store)
      end

      it "redirects to the image_store" do
        ImageStore.stub(:find) { mock_image_store(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(image_store_url(mock_image_store))
      end
    end

    describe "with invalid params" do
      it "assigns the image_store as @image_store" do
        ImageStore.stub(:find) { mock_image_store(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:image_store).should be(mock_image_store)
      end

      it "re-renders the 'edit' template" do
        ImageStore.stub(:find) { mock_image_store(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested image_store" do
      ImageStore.stub(:find).with("37") { mock_image_store }
      mock_image_store.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the image_stores list" do
      ImageStore.stub(:find) { mock_image_store }
      delete :destroy, :id => "1"
      response.should redirect_to(image_stores_url)
    end
  end

end
